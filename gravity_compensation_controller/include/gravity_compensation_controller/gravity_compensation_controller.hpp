#ifndef GRAVITY_COMPENSATION_CONTROLLER__GRAVITY_COMPENSATION_CONTROLLER_HPP_
#define GRAVITY_COMPENSATION_CONTROLLER__GRAVITY_COMPENSATION_CONTROLLER_HPP_

#include <memory>
#include <vector>

#include "gravity_compensation_controller/visibility_control.h"

#include "controller_interface/controller_interface.hpp"
#include "trajectory_msgs/msg/joint_trajectory.hpp"
#include "hardware_interface/handle.hpp"

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"

#include "realtime_tools/realtime_box.h"

// auto-generated by generate_parameter_library
#include "gravity_compensation_controller_parameters.hpp"

namespace gravity_compensation_controller
{
    class GravityCompensationController : public controller_interface::ControllerInterface
    {
        using JointTrajectory = trajectory_msgs::msg::JointTrajectory;

    public:
        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        GravityCompensationController();

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::InterfaceConfiguration command_interface_configuration() const override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::InterfaceConfiguration state_interface_configuration() const override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::return_type update(
            const rclcpp::Time &time, const rclcpp::Duration &period) override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_init() override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_configure(
            const rclcpp_lifecycle::State &previous_state) override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_activate(
            const rclcpp_lifecycle::State &previous_state) override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_deactivate(
            const rclcpp_lifecycle::State &previous_state) override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_cleanup(
            const rclcpp_lifecycle::State &previous_state) override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_error(
            const rclcpp_lifecycle::State &previous_state) override;

        GRAVITY_COMPENSATION_CONTROLLER_PUBLIC
        controller_interface::CallbackReturn on_shutdown(
            const rclcpp_lifecycle::State &previous_state) override;

    protected:
        // Parameters from ROS for gravity_compensation_controller
        std::shared_ptr<ParamListener> param_listener_;
        Params params_;

        bool pose_initialized_ = false;

        bool subscriber_is_active_ = false;
        rclcpp::Subscription<JointTrajectory>::SharedPtr joint_trajectory_sub_ = nullptr;
        realtime_tools::RealtimeBox<std::vector<double>> received_trajectory_;
    };
} // namespace gravity_compensation_controller
#endif // GRAVITY_COMPENSATION_CONTROLLER__GRAVITY_COMPENSATION_CONTROLLER_HPP_